setwd("D:/Workplace/R_Project/1st project/personal")
library(rvest)
library(rvest)
library(dplyr)
library(rvest)
library(dplyr)
library(stringr)
library(openxlsx)
library(abind)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
base_url <- "https://movie.naver.com"
url_sub <- "/movie/bi/mi/point.nhn?code=161967"
url <- paste0(base_url,url_sub)
html <- read_html(url)
## 네티즌 평가, 평점 관련 url 추출
url2 <- html %>% html_node('iframe.ifr') %>% html_attr('src')
url_add <- "&page="
url_ifr <- paste0(base_url,url2,url_add)
## 실시간 댓글 건수
ems_html <- read_html(url_ifr)
ems <- ems_html %>%
html_node("div.score_total") %>%
html_nodes("em") %>%
html_text()
ems <- as.numeric(gsub(",","",ems[2]))
pages <- 1:ceiling(ems/10)
naver_movie <- data.frame(score=c(),review=c(),writer=c(),time=c())
for (n in 1:length(pages)) {
if (n %% 100 == 0)
print(n)
url_pages <- paste0(url_ifr,pages[n])
html2 <- read_html(url_pages)
lis <- html2 %>% html_node('div.score_result') %>% html_nodes('li')
score <- c()
review <- c()
writer <- c()
time <- c()
for (li in lis) {
# score
score <- c(score,html_node(li,'.star_score') %>% html_text('em') %>% trim())
# review
tmp <- li %>% html_node('.score_reple') %>% html_text('p') %>% trim()
idx <- str_locate(tmp,'\r')
review <- c(review,str_sub(tmp,1,idx[1]-1))
# writer
tmp <- trim(str_sub(tmp,idx[1],-1))
idx <- str_locate(tmp,'\r')
writer <- c(writer,str_sub(tmp,1,idx[1]-1))
# time
tmp <- trim(str_sub(tmp,idx[1],-1))
idx <- str_locate(tmp,'\r')
time <- c(time,str_sub(tmp,1,idx[1]-1))
}
movie <- data.frame(score=score,review=review,writer=writer,time=time)
naver_movie <- rbind.data.frame(naver_movie,movie)
}
View(naver_movie)
write.csv(naver_movie,"naver_movie.csv")
str(naver_movie)
View(naver_movie)
# 엑셀파일로 불러낸 데이터를 엑셀작업 후 R로 불러들임.
naver_movie <- read.csv("D:/Workplace/R_Project/1st project/personal/naver_movie.csv",header=T)
str(naver_movie)
library(ggplot2)
require(dplyr)
data_movie <- naver_movie %>%
select(score,date,hour)
View(data_movie)
# 일자별 평균평점 데이터
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
View(data_movie1)
data_movie1
data_movie1
ggplot(data_movie,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
str(data_movie1)
ggplot(data_movie,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
colnames(data_movie1)
ggplot(data_movie1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
ggplot(data_movie1,aes(x=date,y=average)) +
geom_line()
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
data_movie1$date <- as.factor(data_movie1$date)
ggplot(data_movie1,aes(x=date,y=average)) +
geom_line()
ggplot(data_movie1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
ggplot(data_movie1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(angle=90,color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
# 일자별 평균평점 데이터
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
nrow(data_movie1)
# 일자별 평균평점 데이터
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
data_movie1$num <- 1:nrow(data_movie1)
ggplot(data_movie1,aes(x=num,y=average,fill=date)) +
geom_line()
View(data_movie1)
ggplot(data_movie1,aes(x=num,y=average)) +
geom_line()
ggplot(data_movie1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
# 일자별 평균평점 데이터
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
data_movie1
data_movie1
View(data_movie1)
# 시간대별 평균평점 데이터
data_movie2 <- data_movie %>%
group_by(hour) %>%
summarise(average=mean(score,na.rm=T))
data_movie2
ggplot(data_movie2,aes(x=hour,y=average,fill=date)) +
geom_line(size=2) +
xlab("시간대") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 시간대별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
str(data_movie2)
ggplot(data_movie2,aes(x=hour,y=average)) +
geom_line(size=2) +
xlab("시간대") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 시간대별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=16,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=12,face="bold"),
axis.title.y = element_text(color="blue",size=12,face="bold"))
# 일자별, 시간대별 평균평점 데이터
data_movie3 <- data_movie %>%
group_by(date,hour) %>%
summarise(average=mean(score,na.rm=T))
View(data_movie3)
ggplot(data_movie3,aes(x=hour,y=average,colour=date)) +
geom_line(size=1) +
xlab("시간대") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=20,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=15,face="bold"),
axis.title.y = element_text(color="blue",size=15,face="bold"))
data_movie %>% group_by(date,hour) %>% summarise(result=shapiro.test(score),na.rm=T)
a <- shapiro.test(naver_movie$score)
View(naver_movie)
a <- ks.test(naver_movie$score,"pnorm",mean=mean(naver_movie$score),sd=sd("naver_movie$score"))
range(naver_movie$score)
qqnorm(naver_movie$score) ; qqline(naver_movie$score)
?ks.test
a <- ks.test(naver_movie$score,"pnorm",mean=mean(naver_movie$score),sd=sd(naver_movie$score))
shapiro.test(naver_movie$score)
rnorm(10)
rnorm(10)+2
qqnorm(naver_movie$score) ; qqline(naver_movie$score)
shapiro.test(naver_movie$score+2)
?kruskal.test
kruskal.test(score~date,data=naver_music)
kruskal.test(score~date,data=naver_movie)
kruskal.test(score~hour,data=naver_movie)
bartlett.test(score~date,data=naver_movie)
str(naver_movie)
anova(lm(score~date,data=naver_movie))
bartlett.test(score~date,data=naver_movie)
bartlett.test(score~hour,data=naver_movie)
naver_movie$hour <- as.factor(naver_movie$hour)
bartlett.test(score~hour,data=naver_movie)
anova(lm(score~hour,data=naver_movie))
kruskal.test(score~date,data=naver_movie)
kruskal.test(score~hour,data=naver_movie)
kruskal.test(score~date*hour,data=naver_movie)
bartlett.test(score~date*hour,data=naver_movie)
install.packages("reshape2")
library(reshape2)
# 엑셀파일로 불러낸 데이터를 엑셀작업 후 R로 불러들임.
naver_movie <- read.csv("D:/Workplace/R_Project/1st project/personal/naver_movie.csv",header=T)
naver_movie$hour <- as.factor(naver_movie$hour)
bartlett.test(score~dh,data=naver_movie)
anova(lm(score~date*hour,data=naver_movie))
?TukeyHSD
res1 <- lm(score~date,data=naver_movie)
out1 <- aov(res1)
(ph1 <- TukeyHSD(out1))
res1 <- lm(score~date,data=naver_movie)
out1 <- aov(res1)
(ph1 <- TukeyHSD(out1))
plot(ph1)
plot(ph1)
res2 <- lm(score~hour,data=naver_movie)
out2 <- aov(res2)
ph2 <- TukeyHSD(out2)
plot(ph2)
friedman.test(score~date*hour,data=naver_movie)
friedman.test(score~date|hour,data=naver_movie)
attach(naver_movie)
friedman.test(score,date,hour)
data_movie3
friedman.test(score,date)
?friedman.test
friedman.test(score,date,X)
friedman.test(score,db,X)
attach(naver_movie)
friedman.test(score,db,X)
friedman.test(score,dh,X)
attach(naver_movie)
friedman.test(score,dh,X)
bartlett.test(score~dh,data=naver_movie)
anova(lm(score~dh,data=naver_movie))
