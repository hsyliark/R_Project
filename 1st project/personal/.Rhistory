wordcount <- wordcount[wordorder[1:i-1]]
head(wordcount,50)
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(data=names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
## 필요 패키지 설치
library(rvest)
## 필요 패키지 설치
library(rvest)
library(dplyr)
## 필요 패키지 설치
library(rvest)
library(dplyr)
library(stringr)
library(openxlsx)
library(abind)
# 엑셀파일로 불러낸 데이터를 엑셀작업 후 R로 불러들임.
naver_movie <- read.csv("D:/Workplace/R_Project/1st project/personal/naver_movie.csv",header=T)
library(rJava)
library(rJava)
library(KoNLP)
library(RColorBrewer)
useSejongDic()
library(rJava)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
install.packages("KoNLP")
library(KoNLP)
install.packages('digest')
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
require(dplyr)
review <- naver_movie %>% select(review)
write.table(review,"D:/Workplace/R_Project/1st project/personal/review.txt")
require(stringr)
review <- readLines("D:/Workplace/R_Project/1st project/personal/review.txt")
review <- str_replace_all(review,"[A-z]","") # 모든 영문자 제거
review <- str_replace_all(review,"\\d","") # 숫자 제거
review <- str_replace_all(review,"[:punct:]","") # 특수문자 제거
words <- sapply(review,extractNoun,USE.NAMES=F) # 명사 추출
head(unlist(words),100)
words <- unlist(words)
words <- gsub("^ㄷ","",words)
words <- gsub("^ㄱ","",words)
words <- gsub("^","",words)
words <- gsub("있었","",words)
words <- gsub("하가","",words)
words <- gsub("죽습니","죽다",words)
words <- gsub("영화였습니","영화",words)
words <- gsub("영화입니","영화",words)
words <- gsub("박서준이","박서준",words)
words <- gsub("봉감독","봉준호",words)
words <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, words)
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
wordorder <- order(wordcount,decreasing=T)
for (i in 1:length(wordorder)) {
if(wordcount[wordorder[i]]==1) {
break
}
}
wordcount <- wordcount[wordorder[1:i-1]]
head(wordcount,50)
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(data=names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(data=names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(5,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcount
review <- naver_movie %>% select(review)
write.table(review,"D:/Workplace/R_Project/1st project/personal/review.txt")
require(stringr)
review <- readLines("D:/Workplace/R_Project/1st project/personal/review.txt")
review <- str_replace_all(review,"[A-z]","") # 모든 영문자 제거
review <- str_replace_all(review,"\\d","") # 숫자 제거
review <- str_replace_all(review,"[:punct:]","") # 특수문자 제거
words <- sapply(review,extractNoun,USE.NAMES=F) # 명사 추출
head(unlist(words),100)
words <- unlist(words)
words <- gsub("^ㄷ","",words)
words <- gsub("^ㄱ","",words)
words <- gsub("^","",words)
words <- gsub("있었","",words)
words <- gsub("하가","",words)
words <- gsub("죽습니","죽다",words)
words <- gsub("재밌","재밌다",words)
words <- gsub("영화였습니","영화",words)
words <- gsub("영화입니","영화",words)
words <- gsub("박서준이","박서준",words)
words <- gsub("봉준호는","봉준호",words)
words <- gsub("봉감독","봉준호",words)
words <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, words)
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
wordorder <- order(wordcount,decreasing=T)
for (i in 1:length(wordorder)) {
if(wordcount[wordorder[i]]==1) {
break
}
}
wordcount <- wordcount[wordorder[1:i-1]]
wordcount <- table(wordcount[wordorder[1:i-1]])
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
wordorder <- order(wordcount,decreasing=T)
for (i in 1:length(wordorder)) {
if(wordcount[wordorder[i]]==1) {
break
}
}
wordcount[wordorder[1:3]]
str(wordcount)
freqwords <- wordcount[wordorder[1:i-1]]
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,2),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
words <- gsub("<","",words)
words <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, words)
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(8,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(10,0.5),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(10,2),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
par(oma=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(10,1),rot.per=0.25,min.freq=2,
random.order=F,random.color=T,colors=palete)
## 필요 패키지 설치
library(rvest)
library(dplyr)
library(stringr)
library(openxlsx)
library(abind)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
base_url <- "https://movie.naver.com"
url_sub <- "/movie/bi/mi/point.nhn?code=161967"
url <- paste0(base_url,url_sub)
url
html <- read_html(url)
## 네티즌 평가, 평점 관련 url 추출
url2 <- html %>% html_node('iframe.ifr') %>% html_attr('src')
url_add <- "&page="
url_ifr <- paste0(base_url,url2,url_add)
url_ifr
# 엑셀파일로 불러낸 데이터를 엑셀작업 후 R로 불러들임.
naver_movie <- read.csv("D:/Workplace/R_Project/1st project/personal/naver_movie.csv",header=T)
library(ggplot2)
library(gridExtra)
## 필요 패키지 설치
library(rvest)
library(dplyr)
library(stringr)
library(openxlsx)
library(abind)
data_movie <- naver_movie %>%
select(score,date,hour)
# 일자별 평균평점 데이터
data_movie1 <- data_movie %>%
group_by(date) %>%
summarise(average=mean(score,na.rm=T))
# 시간대별 평균평점 데이터
data_movie2 <- data_movie %>%
group_by(hour) %>%
summarise(average=mean(score,na.rm=T))
ggplot(data_movie1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점") +
theme(plot.title = element_text(color="black",size=20,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=15,face="bold"),
axis.title.y = element_text(color="blue",size=15,face="bold"))
data_movie1_1 <- data_movie1 %>%
filter(date %in% c('2019.05.30','2019.05.31','2019.06.01','2019.06.02','2019.06.03',
'2019.06.04','2019.06.05','2019.06.06','2019.06.07'))
data_movie1_2 <- data_movie1 %>%
filter(date %in% c('2019.06.08','2019.06.09','2019.06.10','2019.06.11','2019.06.12',
'2019.06.13','2019.06.14','2019.06.15','2019.06.16'))
data_movie1_3 <- data_movie1 %>%
filter(date %in% c('2019.06.17','2019.06.18','2019.06.19','2019.06.20','2019.06.21',
'2019.06.22','2019.06.23','2019.06.24','2019.06.25'))
data_movie1_4 <- data_movie1 %>%
filter(date %in% c('2019.06.26','2019.06.27','2019.06.28','2019.06.29','2019.06.30',
'2019.07.01','2019.07.02','2019.07.03','2019.07.04','2019.07.05'))
require(ggplot2)
require(gridExtra)
g1 <- ggplot(data_movie1_1,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점 1") +
theme(plot.title = element_text(color="black",size=13,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=11,face="bold"),
axis.title.y = element_text(color="blue",size=11,face="bold"))
g2 <- ggplot(data_movie1_2,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점 2") +
theme(plot.title = element_text(color="black",size=13,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=11,face="bold"),
axis.title.y = element_text(color="blue",size=11,face="bold"))
g3 <- ggplot(data_movie1_3,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점 3") +
theme(plot.title = element_text(color="black",size=13,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=11,face="bold"),
axis.title.y = element_text(color="blue",size=11,face="bold"))
g4 <- ggplot(data_movie1_4,aes(x=date,y=average,fill=date)) +
geom_bar(stat="identity") +
xlab("날짜") + ylab("평균 평점") +
ggtitle("영화 '기생충' 관련 일자별 네티즌 평균평점 4") +
theme(plot.title = element_text(color="black",size=13,face="bold.italic",hjust=0.5),
axis.title.x = element_text(color="red",size=11,face="bold"),
axis.title.y = element_text(color="blue",size=11,face="bold"))
grid.arrange(g1,g2,g3,g4,nrow=2,ncol=2)
# 일자별, 시간대별 평균평점 데이터
data_movie3 <- data_movie %>%
group_by(date,hour) %>%
summarise(average=mean(score,na.rm=T))
37*24
# 엑셀파일로 불러낸 데이터를 엑셀작업 후 R로 불러들임.
naver_movie <- read.csv("D:/Workplace/R_Project/1st project/personal/naver_movie.csv",header=T)
## 필요 패키지 설치
library(rvest)
## 필요 패키지 설치
library(rvest)
library(dplyr)
library(stringr)
library(openxlsx)
library(stringr)
library(openxlsx)
library(abind)
library(ggplot2)
library(gridExtra)
require(dplyr)
library(rJava)
library(KoNLP)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
require(dplyr)
review <- naver_movie %>% select(review)
write.table(review,"D:/Workplace/R_Project/1st project/personal/review.txt")
require(stringr)
review <- readLines("D:/Workplace/R_Project/1st project/personal/review.txt")
review <- str_replace_all(review,"[A-z]","") # 모든 영문자 제거
review <- str_replace_all(review,"\\d","") # 숫자 제거
review <- str_replace_all(review,"[:punct:]","") # 특수문자 제거
words <- sapply(review,extractNoun,USE.NAMES=F) # 명사 추출
words <- sapply(review,extractNoun,USE.NAMES=F) # 명사 추출
head(unlist(words),100)
head(unlist(words),100)
words <- unlist(words)
words <- gsub("^ㄷ","",words)
words <- gsub("^ㄴ","",words)
words <- gsub("하가","",words)
words <- gsub("죽습니","죽다",words)
words <- gsub("죽습니","죽다",words)
words <- gsub("재밌","재밌다",words)
words <- gsub("죽습니","죽다",words)
words <- gsub("재밌","재밌다",words)
words <- gsub("영화였습니","영화",words)
words <- gsub("영화였습니","영화",words)
words <- gsub("영화입니","영화",words)
words <- gsub("영화입니","영화",words)
words <- gsub("박서준이","박서준",words)
words <- gsub("영화입니","영화",words)
words <- gsub("박서준이","박서준",words)
words <- gsub("봉준호는","봉준호",words)
words <- gsub("영화입니","영화",words)
words <- gsub("박서준이","박서준",words)
words <- gsub("봉준호는","봉준호",words)
words <- gsub("봉감독","봉준호",words)
words <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, words)
wordcount <- table(words)
head(sort(wordcount,decreasing=T),50)
wordcount>=3
sum(wordcount>=3)
length(wordcount)
wordcount1 <- wordcount[wordcount>=3]
wordcount1
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(oma=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(10,1),rot.per=0.25,min.freq=3,
random.order=F,random.color=T,colors=palete)
warnings()
length(warnings())
wordcloud(names(wordcount),freq=wordcount,scale=c(10,1),rot.per=0.25,min.freq=4,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.5),rot.per=0.25,min.freq=4,
random.order=F,random.color=T,colors=palete)
length(wordcount>=4)
wordcount>=4
sum(wordcount>=4)
head(wordcount1)
wordcount1 <- wordcount[wordcount>=5]
length(wordcount1)
sum(wordcount>=5)
wordcloud(names(wordcount1),freq=wordcount1,scale=c(8,0.5),rot.per=0.25,min.freq=5,
random.order=F,random.color=T,colors=palete)
length(warnings())
wordcount1 <- wordcount[wordcount>=5]
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(mar=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,1),rot.per=0.25,min.freq=5,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>10]
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(mar=rep(0,4))
head(wordcloud1,30)
head(wordcount1,30)
length(wordcount1)
wordcount1 <- wordcount[wordcount>20]
head(wordcount1,50)
length(wordcount1)
require(wordcloud)
par(mar=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,1),rot.per=0.25,min.freq=21,
random.order=F,random.color=T,colors=palete)
range(wordcount)
wordcount1 <- wordcount[wordcount>30]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.8),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
mode(wordcount)
sum(wordcount>40)
sum(wordcount>50)
wordcount1 <- wordcount[wordcount>50]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.8),rot.per=0.25,min.freq=51,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.2),rot.per=0.25,min.freq=51,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>4]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.2),rot.per=0.25,min.freq=5,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>4]
require(RColorBrewer)
palete <- brewer.pal(12,"Paired")
require(wordcloud)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=5,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>4]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.3),rot.per=0.25,min.freq=5,
random.order=F,random.color=T,colors=palete)
tail(sort(wordcount,decreasing=T),100)
tail(sort(wordcount,decreasing=T),200)
wordcount<=50
sum(wordcount<=50)
sum(wordcount<=40)
sum(wordcount<=30)
sum(wordcount<=20)
sum(wordcount<=10)
sum(wordcount<=5)
length(wordcount)
wordcount1 <- wordcount[wordcount>10]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=11,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>20]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=21,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>30]
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>40]
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,1),rot.per=0.25,min.freq=41,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>50]
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,1),rot.per=0.25,min.freq=51,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>40]
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=41,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>30]
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>35]
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=36,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,1),rot.per=0.25,min.freq=36,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=36,
random.order=F,random.color=T,colors=palete)
wordcount1 <- wordcount[wordcount>30]
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.3),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
palete <- brewer.pal(12,"Paired")
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(9,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(10,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(10,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(9,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
par(mai=rep(0,4))
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.5),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(9,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(8,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.4),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
wordcloud(names(wordcount),freq=wordcount,scale=c(7,0.45),rot.per=0.25,min.freq=31,
random.order=F,random.color=T,colors=palete)
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
